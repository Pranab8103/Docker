#Overview of Storage drivers
----------------------------
* A docker image is built up from a series of layers
* Storage Driver piece all these things together for you 
* These are multiple storage drivers available with different trade-off.

> docker info

* There are various storage drivers available in Docker, these includes:
    - AUFS
    - Device Maapper 
    - OverlayFS 
    - ZFS
    - VFS
    - Brtfs

Block Storage
-------------
* In block storage, the data is stored in terms of blocks
* Data stored in blocks are normally read or written entirely whole block at the same time
* Most of the file systems are based on block devices.

Object Storage
--------------
* Object storage is a data storage architecture that manages data as objects as opposed to blocks of 
storage 
* An object is defined as a data(file) along with all it's meta-data which is combined together as an object
* This object is given an ID which is calculated from the content of the object(from the data and metadata).
Application can then call object with the unique object ID.

> docker container run -d --name overlay2 nginx

> systemctl stop docker 

> cd /etc/docker/

> nano daemon.json

    {
        "storage-driver": "aufs"
    }

> systemctl start docker

#Storage driver has changed from overlay2 to aufs 
> docker info 

#overlay2 container is no longer accessible 
> docker ps -a 

#Overview of Docker volumes
---------------------------
* Docker has two options for containers to store files in the host machine, so that the files are persisted 
even after the container stops: volumes and bind mounts.

* If you are running Docker on Linux you can also use a tmpfs mounts 

Important Pointers
------------------
* A given volume can be mounted into multiple containers simultaneously.

* When no running container is using a volume, the volume is still available to Docker and is not removed 
automatically.

* When you umount a volume, it may be named or anonymous. Anonymous volumes are not given an explicit name
when they are first mounted into a container, so Docker gives them a random name that is guaranteed to be unique
within a given Docker host.

> docker volume create myvolume

> docker container run -dt --name busybox -v myvolume:/etc busybox sh

> docker container exec --it busybox sh
    - cd etc 
    #all of the files will be available in the host os also 
    - ls -l
    - nano new_file.txt

> docker container rm busybox -f

> docker container run -dt --name busybox2 -v myvolume:/etc busybox sh

> docker container exec --it busybox2 sh
    - cd etc 
    #new_file.txt will be available here which was created earlier 
    - ls -l

> docker volume rm myvolume

Dockerfile
----------
***VOLUMES resides in /var/lib/docker/volumes/

FROM busybox 
RUN mkdir /myvolume2 
RUN echo "hello world" > /myvolume/hello_world.txt 
VOLUME /myvolume

> docker build -t mydemo .

> docker container run -dt --name mydemo mydemo sh

#Gives all the volumes present. volume names are have random names
(For this reason sometimes named volumes are prefered) 

> docker volume ls

#Named volumes
--------------
> docker container run -dt --name busybox -v mydemo02:/myvolume mydemo sh 

Understanding Bind mounts
-------------------------
> docker container run -dt --name nginx nginx

> docker container inspect nginx

Automatically remove volume on container exist
----------------------------------------------
* Whenever a container is created with -dt flag and if the main process completes/stops, then it goes 
into the Exited stage. 
* We can see list of all containers(Runnin /Exited) with docker container ps -a command.
* Many a times, containers performs a job and we want container to automatically get deleted once it exits.
This can be achieved with the --rm options.

#ping google.com 10 times an container will exit but container exists in docker 
> docker container run -dt --name container01 busybox ping -c10 google.com 

#--rm removes the container automatically when process finish executing
> docker container run --rm -dt --name container01 busybox ping -c10 google.com 

#delete the associated volumes also
> docker container run --rm -dt --name container01 -v /testvolume busybox ping -c10 google.com 

#Device Mapper
--------------
* The device mapper us a framework provided by the Linux kernel for mapping physical block devices onto
higher-level virtual block devices.
* Device mapper works by passing data from a virtual block device, which is provided by the device mapper
itself, to another block device.
* Device mapper creates a logical devices on top of physical block device and provides features likess:
    - RAID, Encryption, Cache and various others.

There are 2 modes for devicemapper storage driver:

* loop-lvm mode:
    - Should only be used in testing environment 
    - Makes use of loopback mechanism which is generally on the slower side

direct-lvm mode:
    - Production hosts using the devicemapper storage driver mst use direct-lvm- This is much more faster 
    then the loop-lvm mode

    
